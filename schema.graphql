type Registry @entity {
  id: ID!
  address: Bytes!
  treasury: Bytes!
  rewardPool: Bytes!
  numTokens: Int!
  numTokensActive: Int!
  numTokensFundraising: Int!
  minters: [Minter!]! @derivedFrom(field: "registry")
}

type Minter @entity {
  id: ID!
  address: Bytes!
  createdAt: BigInt!
  registry: Registry!
  feeTotal: BigInt!
  feeTreasury: BigInt!
  feeRewardPool: BigInt!
}

type Token @entity {
  id: ID!
  deployedAt: Int!
  owner: Bytes!
  address: Bytes!
  name: String!
  symbol: String!
  decimals: Int!
  supply: BigInt! # currently minted (i.e. staked for)
  maxSupply: BigInt! # maximum that can be minted
  availableSupply: BigInt! # ~ token owner balance
  fee: BigInt!
  nav: Int
  navFeePaid: Int
  kyaUri: String

  isFrozen: Boolean!
  isFrozenBy: Bytes

  whitelist: [WhitelistedAccount!]! @derivedFrom(field: "token")
  greylist: [GreylistedAccount!]! @derivedFrom(field: "token")
  holders: [TokenHolder!]! @derivedFrom(field: "token")
  transferRequests: [TransferRequest!]! @derivedFrom(field: "token")
  transfers: [Transfer!]! @derivedFrom(field: "token")
  fundraisers: [Fundraiser!]! @derivedFrom(field: "token")

  currentFundraiser: Fundraiser
  transferRules: TransferRules
  features: Features
}

type Fee @entity {
  id: ID!
  token: Token
  total: BigInt!
  treasury: BigInt!
  rewardPool: BigInt!
}

type Erc20Token @entity {
  id: ID!
  address: Bytes!
  name: String!
  symbol: String!
  decimals: Int!
}

type WhitelistedAccount @entity {
  id: ID!
  address: Bytes!
  createdAt: BigInt!
  token: Token
}

type GreylistedAccount @entity {
  id: ID!
  address: Bytes!
  createdAt: BigInt!
  token: Token
}

# need to be able to find token for TransferRules events
type TransferRules @entity {
  id: ID!
  address: Bytes
  token: Token!
}

type Features @entity {
  id: ID!
  address: Bytes
  token: Token!

  forceTransfer: Boolean!
  tokenFreeze: Boolean!
  accountFreeze: Boolean!
  accountBurn: Boolean!
  transferRules: Boolean!
  autoburn: Boolean!
  autoburnTs: Int
}

enum TransferRequestStatus {
  Pending,
  Approved,
  Denied,
}

type TransferRequest @entity {
  id: ID!
  token: Token!
  requestId: Int!
  from: TokenHolder!
  fromAddress: Bytes!
  to: TokenHolder!
  toAddress: Bytes!
  value: BigInt!
  status: TransferRequestStatus!
  createdAt: Int!
  updatedAt: Int!
}

type Transfer @entity {
  id: ID!
  createdAt: Int!
  token: Token!
  from: TokenHolder!
  fromAddress: Bytes!
  to: TokenHolder!
  toAddress: Bytes!
  value: BigInt!
}

type TokenHolder @entity {
  id: ID!
  token: Token!
  address: Bytes!
  balance: BigInt!
  createdAt: Int!
  updatedAt: Int!
  isFrozen: Boolean!
}

enum FundraiserStatus {
  SettingUp,
  Setup,
  Running,
  Finished,
  Canceled
}

type Fundraiser @entity {
  # from constructor
  id: ID!
  address: Bytes!
  owner: Bytes!
  token: Token!
  label: String!
  startDate: Int!
  endDate: Int!
  createdAt: Int!
  softCap: BigInt!
  hardCap: BigInt!
  supply: BigInt! # aka tokensToMint
  baseCurrency: Erc20Token!
  tokenPrice: BigInt!
  affiliateManager: AffiliateManager
  contributorRestrictions: Bytes!
  fundraiserManager: Bytes!
  minter: Bytes!
  contributionsLocked: Boolean!
  # computed
  amountQualified: BigInt!
  amountPending: BigInt!
  amountRefunded: BigInt!
  amountWithdrawn: BigInt!
  status: FundraiserStatus!
  contributors: [Contributor!] @derivedFrom(field: "fundraiser")
  affiliates: [Affiliate!] @derivedFrom(field: "fundraiser")
  search: String
}

type AffiliateManager @entity {
  id: ID!
  address: Bytes!
  fundraiser: Fundraiser!
}

type Affiliate @entity {
  id: ID!
  address: Bytes!
  referral: String!
  amount: BigInt!
  amountClaimed: BigInt!
  percentage: BigInt!
  affiliateManager: AffiliateManager!
  fundraiser: Fundraiser!
}

enum ContributorStatus {
  Pending
  Qualified
  Removed
  Refunded
}

type Contributor @entity {
  id: ID!
  fundraiser: Fundraiser!
  status: ContributorStatus!
  address: Bytes!
  amount: BigInt!
  amountClaimed: BigInt!
  contributions: [Contribution!] @derivedFrom(field: "contributor")
}

# Bacause of the nature of stuff, we cannot update contributions from previous state or delete the ones with wrong state
# For that reason, we remember all of them and the app is responsible for filtering only those where
# contribution.type = contributor.status
type Contribution @entity {
  id: ID!
#  fundraiser: Fundraiser!
  contributor: Contributor!
  type: ContributorStatus!
  timestamp: Int!
  amount: BigInt!
}
